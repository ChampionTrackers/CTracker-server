// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

model User {
  id           Int            @id @default(autoincrement()) @map("user_iduser")
  email        String         @unique @map("user_email")
  password     String         @map("user_password")
  name         String         @map("user_name")
  nickname     String         @unique @map("user_nickname")
  picture      String?        @map("user_picture")
  score        Int            @default(0) @map("user_score")
  Team         Team[]
  Championship Championship[]
  Guess        Guess[]

  @@map("tb_user")
}

model Team {
  id          Int     @id @default(autoincrement()) @map("team_idteam")
  userId      Int     @map("user_iduser")
  name        String  @map("team_name")
  picture     String? @map("team_picture")
  description String? @map("team_description")
  maxPlayers  Int     @map("team_maxPlayers")
  score       Int     @default(0) @map("team_score")

  user             User               @relation(fields: [userId], references: [id], onDelete: Restrict)
  TeamChampionship TeamChampionship[]
  TeamScore        TeamScore[]

  @@map("tb_team")
}

model Championship {
  id          Int                @id @default(autoincrement()) @map("cha_idchampionship")
  userId      Int                @map("user_iduser")
  name        String             @map("cha_name")
  picture     String?            @map("cha_picture")
  description String             @map("cha_description")
  game        String             @map("cha_game")
  status      ChampionshipStatus @map("cha_status")
  type        ChampionshipType   @map("cha_type")
  createdAt   DateTime           @default(now()) @map("cha_createdAt")

  user             User               @relation(fields: [userId], references: [id], onDelete: Restrict)
  TeamChampionship TeamChampionship[]
  Match            Match[]

  @@map("tb_championship")
}

model TeamChampionship {
  teamId         Int @map("team_idteam")
  championshipId Int @map("cha_idchampionship")
  victory        Int @default(0) @map("tc_victory")
  defeat         Int @default(0) @map("tc_defeat")
  draw           Int @default(0) @map("tc_draw")

  team         Team         @relation(fields: [teamId], references: [id], onDelete: Restrict)
  championship Championship @relation(fields: [championshipId], references: [id], onDelete: Restrict)

  @@unique([teamId, championshipId])
  @@map("tb_team_championship")
}

model Match {
  id               Int         @id @default(autoincrement()) @map("mat_idmatch")
  championshipId   Int         @map("cha_idchampionship")
  plannedStartTime DateTime    @default(now()) @map("mat_planned_start_time")
  status           MatchStatus @default(SCHEDULED) @map("mat_status")

  championship Championship @relation(fields: [championshipId], references: [id])
  TeamScore    TeamScore[]

  @@map("tb_match")
}

model Guess {
  id          Int          @id @default(autoincrement()) @map("guess_id")
  userId      Int          @map("user_iduser")
  teamScoreId Int          @map("ts_idteamscore")
  outcome     GuessOutcome

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamScore TeamScore @relation(fields: [teamScoreId], references: [id], onDelete: Cascade)

  @@map("tb_guess")
}

model TeamScore {
  id        Int @id @default(autoincrement()) @map("ts_idteamscore")
  matchId   Int @map("mat_idmatch")
  teamId    Int @map("team_idteam")
  teamScore Int @default(0) @map("ts_teamscore")

  team  Team    @relation(fields: [teamId], references: [id])
  match Match   @relation(fields: [matchId], references: [id])
  Guess Guess[]

  @@map("tb_team_score")
}

enum ChampionshipType {
  VIRTUAL
  PHYSICAL
}

enum ChampionshipStatus {
  ACTIVE
  INACTIVE
}

enum MatchStatus {
  SCHEDULED
  RUNNING
  COMPLETED
}

enum GuessOutcome {
  TEAM1_WIN
  TEAM2_WIN
  DRAW
  CANCELLED
}
